#include "core.h"
// Generated by Online c function prototype header generator tool
#ifndef ASSEM_ARM_H
#define ASSEM_ARM_H

#define HOST_REGS 13
#define HOST_CCREG 10
#define EXCLUDE_REG 11
#define SLAVERA_REG 8

#define SH2_REGS 23
#define MAXBLOCK 4096

typedef struct
{
    signed char regmap_entry[HOST_REGS];
    signed char regmap[HOST_REGS];
    u32 wasdirty;
    u32 dirty;
    u64 u;
    u32 wasdoingcp;
    u32 isdoingcp;
    u32 cpmap[HOST_REGS];
    u32 isconst;
    u32 constmap[SH2_REGS];
} regstat;

#define HOST_IMM8 1
#define HAVE_CMOV_IMM 1
#define CORTEX_A8_BRANCH_PREDICTION_HACK 1
#define USE_MINI_HT 1
//#define REG_PREFETCH 1

/* ARM calling convention:
   r0-r3, r12: caller-save
   r4-r11: callee-save */

#define ARG1_REG 0
#define ARG2_REG 1
#define ARG3_REG 2
#define ARG4_REG 3

/* GCC register naming convention:
   r10 = sl (base)
   r11 = fp (frame pointer)
   r12 = ip (scratch)
   r13 = sp (stack pointer)
   r14 = lr (link register)
   r15 = pc (program counter) */

#define FP 11
#define LR 14
#define HOST_TEMPREG 14

// Note: FP is set to &dynarec_local when executing generated code.
// Thus the local variables are actually global and not on the stack.

extern u8 sh2_dynarec_target[16777216];
extern u32 memory_map[1048576]; // 32-bit

//#define BASE_ADDR 0x6000000 // Code generator target address
#define BASE_ADDR ((u32)&sh2_dynarec_target) // Code generator target address
#define TARGET_SIZE_2 24 // 2^24 = 16 megabytes
//#define TARGET_SIZE_2 25 // 2^25 = 32 megabytes

#ifdef ANDROID
#define __clear_cache clear_cache
#endif

void *kill_pointer(void *stub);
void alloc_arm_reg(regstat *cur,int i,signed char reg,char hr);
void alloc_cc(regstat *cur,int i);
void alloc_reg_temp(regstat *cur,int i,signed char reg);
void alloc_reg(regstat *cur,int i,signed char reg);
void arch_init();
void do_clear_cache();
int do_dirty_stub(int i);
int do_map_r_branch(int map, int c, u32 addr, int *jaddr);
int do_map_r(int s,int ar,int map,int cache,int x,int a,int shift,int c,u32 addr);
void do_map_w_branch(int map, int c, u32 addr, int *jaddr);
int do_map_w(int s,int ar,int map,int cache,int x,int c,u32 addr);
void do_miniht_insert(u32 return_address,int rt,int temp);
void do_miniht_jump(int rs,int rh,int ht);
void do_miniht_load(int ht,int rh);
void do_preload_rhash(int r);
void do_preload_rhtbl(int ht);
void do_readstub(int n);
void do_rhash(int rs,int rh);
void do_rmwstub(int n);
void do_unalignedwritestub(int n);
void do_writestub(int n);
void emit_adcimm(unsigned int rs,int imm,unsigned int rt);
void emit_adc(int rs1,int rs2,int rt);
void emit_adcs(int rs1,int rs2,int rt);
void emit_addc(int s, int t, int sr);
void emit_addimm_and_set_flags(int imm,int rt);
void emit_addimm_no_flags(u32 imm,unsigned int rt);
void emit_addimm64_32(int rsh,int rsl,int imm,int rth,int rtl);
void emit_addimm(unsigned int rs,int imm,unsigned int rt);
void emit_add(int rs1,int rs2,int rt);
void emit_addnop(unsigned int r);
void emit_adds(int rs1,int rs2,int rt);
void emit_addsr12(int rs1,int rs2,int rt);
void emit_andimm(int rs,int imm,int rt);
void emit_and(unsigned int rs1,unsigned int rs2,unsigned int rt);
void emit_asrs_imm(int rs,unsigned int imm,int rt);
void emit_bic_lsl(unsigned int rs1,unsigned int rs2,unsigned int shift,unsigned int rt);
void emit_bic_lsr(unsigned int rs1,unsigned int rs2,unsigned int shift,unsigned int rt);
void emit_biccs_imm(int rs,int imm,int rt);
void emit_biceq_lsl(unsigned int rs1,unsigned int rs2,unsigned int shift,unsigned int rt);
void emit_biceq_lsr(unsigned int rs1,unsigned int rs2,unsigned int shift,unsigned int rt);
void emit_bichi_imm(int rs,int imm,int rt);
void emit_bicne_imm(int rs,int imm,int rt);
void emit_bicne_lsl(unsigned int rs1,unsigned int rs2,unsigned int shift,unsigned int rt);
void emit_bicne_lsr(unsigned int rs1,unsigned int rs2,unsigned int shift,unsigned int rt);
void emit_bicvc_imm(int rs,int imm,int rt);
void emit_call(int a);
void emit_callne(int a);
void emit_callreg(unsigned int r);
void emit_cdq();
void emit_clz(int rs,int rt);
void emit_cmov2imm_e_ne_compact(int imm1,int imm2,unsigned int rt);
void emit_cmovb_imm(int imm,int rt);
void emit_cmove_reg(int rs,int rt);
void emit_cmovl_imm(int imm,int rt);
void emit_cmovl_reg(int rs,int rt);
void emit_cmovl(u32 *addr,int rt);
void emit_cmovne_imm(int imm,int rt);
void emit_cmovne_reg(int rs,int rt);
void emit_cmovne(u32 *addr,int rt);
void emit_cmovs_imm(int imm,int rt);
void emit_cmovs_reg(int rs,int rt);
void emit_cmovs(u32 *addr,int rt);
void emit_cmpeqimm(int s, int imm, int sr, int temp);
void emit_cmpeq(int s1, int s2, int sr, int temp);
void emit_cmpge(int s1, int s2, int sr, int temp);
void emit_cmpgt(int s1, int s2, int sr, int temp);
void emit_cmphi(int s1, int s2, int sr, int temp);
void emit_cmphs(int s1, int s2, int sr, int temp);
void emit_cmpimm(int rs,int imm);
void emit_cmp(int rs,int rt);
void emit_cmpmem_indexedsr12_imm(int addr,int r,int imm);
void emit_cmpmem_indexedsr12_reg(int base,int r,int imm);
void emit_cmppl(int s, int sr, int temp);
void emit_cmppz(int s, int sr);
void emit_cmpstr(int s1, int s2, int sr, int temp);
void emit_div0s(int s1, int s2, int sr, int temp);
void emit_div(int rs);
void emit_dt(int t, int sr);
void emit_extjump(pointer addr, int target);
void emit_fabsd(int s,int d);
void emit_fabss(int s,int d);
void emit_faddd(int s1,int s2,int d);
void emit_fadds(int s1,int s2,int d);
void emit_fcmpd(int x,int y);
void emit_fcmps(int x,int y);
void emit_fcvtds(int s,int d);
void emit_fcvtsd(int s,int d);
void emit_fdivd(int s1,int s2,int d);
void emit_fdivs(int s1,int s2,int d);
void emit_flds(int r,int sr);
void emit_fmstat();
void emit_fmuld(int s1,int s2,int d);
void emit_fmuls(int s1,int s2,int d);
void emit_fnegd(int s,int d);
void emit_fnegs(int s,int d);
void emit_fsitod(int s,int d);
void emit_fsitos(int s,int d);
void emit_fsqrtd(int s,int d);
void emit_fsqrts(int s,int d);
void emit_fsts(int sr,int r);
void emit_fsubd(int s1,int s2,int d);
void emit_fsubs(int s1,int s2,int d);
void emit_ftosizd(int s,int d);
void emit_ftosizs(int s,int d);
void emit_idiv(int rs);
void emit_imul(int rs);
void emit_jcc(int a);
void emit_jc(int a);
void emit_jeq(int a);
void emit_jge(int a);
void emit_jl(int a);
void emit_jmp(int a);
void emit_jmpreg(unsigned int r);
void emit_jne(int a);
void emit_jno_unlikely(int a);
void emit_jno(int a);
void emit_jns(int a);
void emit_js(int a);
void emit_ldreq_indexed(int rs, u32 offset, int rt);
void emit_load_return_address(unsigned int rt);
void emit_loadlp(u32 imm,unsigned int rt);
void emit_loadreg(int r, int hr);
void emit_lsls_imm(int rs,unsigned int imm,int rt);
void emit_lsrs_imm(int rs,unsigned int imm,int rt);
void emit_mov2imm_compact(int imm1,unsigned int rt1,int imm2,unsigned int rt2);
void emit_movimm(u32 imm,unsigned int rt);
void emit_mov(int rs,int rt);
void emit_movsbl_indexed_map(int addr, int rs, int map, int rt);
void emit_movsbl_indexed(int offset, int rs, int rt);
void emit_movsbl_reg(int rs, int rt);
void emit_movsbl(int addr, int rt);
void emit_movs(int rs,int rt);
void emit_movswl_indexed_map(int addr, int rs, int map, int rt);
void emit_movswl_indexed(int offset, int rs, int rt);
void emit_movswl_reg(int rs, int rt);
void emit_movswl(int addr, int rt);
void emit_movt(u32 imm,unsigned int rt);
void emit_movw(u32 imm,unsigned int rt);
void emit_movzbl_dualindexedx4(int rs1, int rs2, int rt);
void emit_movzbl_indexed_map(int addr, int rs, int map, int rt);
void emit_movzbl_indexed(int offset, int rs, int rt);
void emit_movzbl_reg(int rs, int rt);
void emit_movzbl(int addr, int rt);
void emit_movzwl_indexed(int offset, int rs, int rt);
void emit_movzwl_reg(int rs, int rt);
void emit_movzwl(int addr, int rt);
void emit_mul(int rs);
void emit_multiply(unsigned int rs1,unsigned int rs2,unsigned int rt);
void emit_negc(int rs, int rt, int sr);
void emit_neg(int rs, int rt);
void emit_negmi(int rs, int rt);
void emit_negs(int rs, int rt);
void emit_negsmi(int rs, int rt);
void emit_not(int rs,int rt);
void emit_or_and_set_flags(int rs1,int rs2,int rt);
void emit_orimm(int rs,int imm,int rt);
void emit_orreq_imm(int rs,int imm,int rt);
void emit_orreq(unsigned int rs1,unsigned int rs2,unsigned int rt);
void emit_orrge_imm(int rs,int imm,int rt);
void emit_orrgt_imm(int rs,int imm,int rt);
void emit_orrhi_imm(int rs,int imm,int rt);
void emit_orrmi_imm(int rs,int imm,int rt);
void emit_orrne_imm(int rs,int imm,int rt);
void emit_orrne(unsigned int rs1,unsigned int rs2,unsigned int rt);
void emit_orrshl(unsigned int rs,unsigned int shift,unsigned int rt);
void emit_orrshr(unsigned int rs,unsigned int shift,unsigned int rt);
void emit_orrvs_imm(int rs,int imm,int rt);
void emit_or(unsigned int rs1,unsigned int rs2,unsigned int rt);
void emit_pcreladdr(unsigned int rt);
void emit_popa();
void emit_popreg(unsigned int r);
void emit_prefetchreg(int r);
void emit_prefetch(void *addr);
void emit_pusha();
void emit_pushimm(int imm);
void emit_pushreg(unsigned int r);
void emit_readword_dualindexedx4(int rs1, int rs2, int rt);
void emit_readword_indexed_map(int addr, int rs, int map, int rt);
void emit_readword_indexed(int offset, int rs, int rt);
void emit_readword(int addr, int rt);
void emit_rmw_andimm(int addr, int map, int imm);
void emit_rmw_orimm(int addr, int map, int imm);
void emit_rmw_xorimm(int addr, int map, int imm);
void emit_rorimm(int rs,unsigned int imm,int rt);
void emit_rors_imm(int rs,unsigned int imm,int rt);
void emit_rotclsr(int t, int sr);
void emit_rotcrsr(int t, int sr);
void emit_rotl(int t);
void emit_rotlsr(int t, int sr);
void emit_rotr(int t);
void emit_rotrsr(int t, int sr);
void emit_rrxs(int rs, int rt);
void emit_rsbimm(int rs, int imm, int rt);
void emit_rscimm(int rs,int imm,unsigned int rt);
void emit_sarcl(int r);
void emit_sarimm(int rs,unsigned int imm,int rt);
void emit_sarsr(int t, int sr);
void emit_sar(unsigned int rs,unsigned int shift,unsigned int rt);
void emit_sbbimm(int imm,unsigned int rt);
void emit_sbb(int rs1,int rs2);
void emit_sbcimm(unsigned int rs,int imm,unsigned int rt);
void emit_sbc(int rs1,int rs2,int rt);
void emit_sbcs(int rs1,int rs2,int rt);
void emit_set_gz32(int rs, int rt);
void emit_set_gz64_32(int rsh, int rsl, int rt);
void emit_set_if_carry32(int rs1, int rs2, int rt);
void emit_set_if_carry64_32(int u1, int l1, int u2, int l2, int rt);
void emit_set_if_less32(int rs1, int rs2, int rt);
void emit_set_if_less64_32(int u1, int l1, int u2, int l2, int rt);
void emit_set_nz32(int rs, int rt);
void emit_set_nz64_32(int rsh, int rsl, int rt);
void emit_sh2tas(int addr, int map, int sr);
void emit_sh2tstimm(int s, int imm, int sr, int temp);
void emit_sh2tst(int s1, int s2, int sr, int temp);
void emit_shlcl(int r);
void emit_shldcl(int r1,int r2);
void emit_shldimm(int rs,int rs2,unsigned int imm,int rt);
void emit_shlimm(int rs,unsigned int imm,int rt);
void emit_shlsr(int t, int sr);
void emit_shl(unsigned int rs,unsigned int shift,unsigned int rt);
void emit_shrcc_imm(int rs,unsigned int imm,int rt);
void emit_shrcl(int r);
void emit_shrdcl(int r1,int r2);
void emit_shrdimm(int rs,int rs2,unsigned int imm,int rt);
void emit_shrimm(int rs,unsigned int imm,int rt);
void emit_shrsr(int t, int sr);
void emit_shr(unsigned int rs,unsigned int shift,unsigned int rt);
void emit_slti32(int rs,int imm,int rt);
void emit_slti64_32(int rsh,int rsl,int imm,int rt);
void emit_sltiu32(int rs,int imm,int rt);
void emit_sltiu64_32(int rsh,int rsl,int imm,int rt);
void emit_smull(unsigned int rs1, unsigned int rs2, unsigned int hi, unsigned int lo);
void emit_storereg(int r, int hr);
void emit_subc(int s, int t, int sr);
void emit_subcs(int rs1,int rs2,int rt);
void emit_sub(int rs1,int rs2,int rt);
void emit_subs(int rs1,int rs2,int rt);
void emit_swapb(int rs,int rt);
void emit_teq(int rs, int rt);
void emit_testimm(int rs,int imm);
void emit_test(int rs, int rt);
void emit_umull(unsigned int rs1, unsigned int rs2, unsigned int hi, unsigned int lo);
void emit_vldr(int r,int vr);
void emit_vstr(int vr,int r);
void emit_writebyte_dualindexedx4(int rt, int rs1, int rs2);
void emit_writebyte_imm(int imm, int addr);
void emit_writebyte_indexed_map(int rt, int addr, int rs, int map, int temp);
void emit_writebyte_indexed(int rt, int offset, int rs);
void emit_writebyte(int rt, int addr);
void emit_writehword_indexed_map(int rt, int addr, int rs, int map, int temp);
void emit_writehword_indexed(int rt, int offset, int rs);
void emit_writehword(int rt, int addr);
void emit_writeword_dualindexedx4(int rt, int rs1, int rs2);
void emit_writeword_imm(int imm, int addr);
void emit_writeword_indexed_map(int rt, int addr, int rs, int map, int temp);
void emit_writeword_indexed(int rt, int offset, int rs);
void emit_writeword(int rt, int addr);
void emit_xchg(int rs, int rt);
void emit_xorimm(int rs,int imm,int rt);
void emit_xor(unsigned int rs1,unsigned int rs2,unsigned int rt);
void emit_zeroreg(int rt);
int gen_orig_addr_w(int ar, int map);
void gen_tlb_addr_r(int ar, int map);
void gen_tlb_addr_w(int ar, int map);
void generate_map_const(u32 addr,int reg);
u32 genimm(u32 imm,u32 *encoded);
u32 genjmp(u32 addr);
void get_bounds(pointer addr,u32 *start,u32 *end);
pointer get_clean_addr(pointer addr);
pointer get_pointer(void *stub);
void inline_readstub(int type, int i, u32 addr, signed char regmap[], int target, int adj, u32 reglist);
void inline_writestub(int type, int i, u32 addr, signed char regmap[], int target, int adj, u32 reglist);
int isclean(pointer addr);
void literal_pool_jumpover(int n);
void literal_pool(int n);
void output_byte(u8 byte);
void output_modrm(u8 mod,u8 rm,u8 ext);
void output_sib(u8 scale,u8 index,u8 base);
void output_w32(u32 word);
void printregs(int edi,int esi,int ebp,int esp,int b,int d,int c,int a);
u32 rd_rn_imm_shift(unsigned int rd, unsigned int rn, u32 imm, unsigned int shift);
u32 rd_rn_rm(unsigned int rd, unsigned int rn, unsigned int rm);
void restore_regs(u32 reglist);
void save_regs(u32 reglist);
void set_jump_target_fillslot(int addr,u32 target,int copy);
void set_jump_target(pointer addr,pointer target);
int verify_dirty(pointer addr);
void wb_valid(signed char pre[],signed char entry[],u32 dirty_pre,u32 dirty,u64 u);



extern void *dynarec_local;
extern u32 memory_map[1048576];
ALIGNED(8) extern u32 mini_ht_master[32][2];
ALIGNED(8) extern u32 mini_ht_slave[32][2];
ALIGNED(4) extern u8 restore_candidate[512];

void FASTCALL WriteInvalidateLong(u32 addr, u32 val);
void FASTCALL WriteInvalidateWord(u32 addr, u32 val);
void FASTCALL WriteInvalidateByte(u32 addr, u32 val);
void FASTCALL WriteInvalidateByteSwapped(u32 addr, u32 val);

void jump_vaddr_r0_master();
void jump_vaddr_r1_master();
void jump_vaddr_r2_master();
void jump_vaddr_r3_master();
void jump_vaddr_r4_master();
void jump_vaddr_r5_master();
void jump_vaddr_r6_master();
void jump_vaddr_r7_master();
void jump_vaddr_r8_master();
void jump_vaddr_r9_master();
void jump_vaddr_r12_master();
void jump_vaddr_r0_slave();
void jump_vaddr_r1_slave();
void jump_vaddr_r2_slave();
void jump_vaddr_r3_slave();
void jump_vaddr_r4_slave();
void jump_vaddr_r5_slave();
void jump_vaddr_r6_slave();
void jump_vaddr_r7_slave();
void jump_vaddr_r8_slave();
void jump_vaddr_r9_slave();
void jump_vaddr_r12_slave();

const pointer jump_vaddr_reg[2][16] = {
    {
        (pointer)jump_vaddr_r0_master,
        (pointer)jump_vaddr_r1_master,
        (pointer)jump_vaddr_r2_master,
        (pointer)jump_vaddr_r3_master,
        (pointer)jump_vaddr_r4_master,
        (pointer)jump_vaddr_r5_master,
        (pointer)jump_vaddr_r6_master,
        (pointer)jump_vaddr_r7_master,
        (pointer)jump_vaddr_r8_master,
        (pointer)jump_vaddr_r9_master,
        0,
        0,
        (pointer)jump_vaddr_r12_master,
        0,
        0,
        0
    },{
        (pointer)jump_vaddr_r0_slave,
        (pointer)jump_vaddr_r1_slave,
        (pointer)jump_vaddr_r2_slave,
        (pointer)jump_vaddr_r3_slave,
        (pointer)jump_vaddr_r4_slave,
        (pointer)jump_vaddr_r5_slave,
        (pointer)jump_vaddr_r6_slave,
        (pointer)jump_vaddr_r7_slave,
        (pointer)jump_vaddr_r8_slave,
        (pointer)jump_vaddr_r9_slave,
        0,
        0,
        (pointer)jump_vaddr_r12_slave,
        0,
        0,
        0
    }
};

u32 needs_clear_cache[1<<(TARGET_SIZE_2-17)];

//#define JUMP_TABLE_SIZE (sizeof(jump_table_symbols)*2)
#define JUMP_TABLE_SIZE 0

#endif /* ASSEM_ARM_H */
